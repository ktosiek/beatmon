-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Beatmon.Api.Query exposing (AccountByAccountIdRequiredArguments, AccountByEmailRequiredArguments, AccountRequiredArguments, AllAccountsOptionalArguments, AllHeartbeatLogsOptionalArguments, AllHeartbeatsOptionalArguments, HeartbeatByHeartbeatIdAndAccountIdRequiredArguments, HeartbeatByHeartbeatIdRequiredArguments, HeartbeatLogByDateAndHeartbeatIdRequiredArguments, HeartbeatLogRequiredArguments, HeartbeatRequiredArguments, NodeRequiredArguments, account, accountByAccountId, accountByEmail, allAccounts, allHeartbeatLogs, allHeartbeats, currentAccount, currentAccountId, heartbeat, heartbeatByHeartbeatId, heartbeatByHeartbeatIdAndAccountId, heartbeatLog, heartbeatLogByDateAndHeartbeatId, node, nodeId, query, selection)

import Beatmon.Api.Enum.AccountsOrderBy
import Beatmon.Api.Enum.HeartbeatLogsOrderBy
import Beatmon.Api.Enum.HeartbeatsOrderBy
import Beatmon.Api.InputObject
import Beatmon.Api.Interface
import Beatmon.Api.Object
import Beatmon.Api.Scalar
import Beatmon.Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


{-| Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.
-}
query : SelectionSet decodesTo RootQuery -> Field decodesTo RootQuery
query object_ =
    Object.selectionField "query" [] object_ identity


{-| The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
-}
nodeId : Field Beatmon.Api.Scalar.Id RootQuery
nodeId =
    Object.fieldDecoder "nodeId" [] (Object.scalarDecoder |> Decode.map Beatmon.Api.Scalar.Id)


type alias NodeRequiredArguments =
    { nodeId : Beatmon.Api.Scalar.Id }


{-| Fetches an object given its globally unique `ID`.

  - nodeId - The globally unique `ID`.

-}
node : NodeRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Interface.Node -> Field (Maybe decodesTo) RootQuery
node requiredArgs object_ =
    Object.selectionField "node" [ Argument.required "nodeId" requiredArgs.nodeId (\(Beatmon.Api.Scalar.Id raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


type alias AllAccountsOptionalArguments =
    { first : OptionalArgument Int, last : OptionalArgument Int, offset : OptionalArgument Int, before : OptionalArgument Beatmon.Api.Scalar.Cursor, after : OptionalArgument Beatmon.Api.Scalar.Cursor, orderBy : OptionalArgument (List Beatmon.Api.Enum.AccountsOrderBy.AccountsOrderBy), condition : OptionalArgument Beatmon.Api.InputObject.AccountCondition }


{-| Reads and enables pagination through a set of `Account`.

  - first - Only read the first `n` values of the set.
  - last - Only read the last `n` values of the set.
  - offset - Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
  - before - Read all values in the set before (above) this cursor.
  - after - Read all values in the set after (below) this cursor.
  - orderBy - The method to use when ordering `Account`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
allAccounts : (AllAccountsOptionalArguments -> AllAccountsOptionalArguments) -> SelectionSet decodesTo Beatmon.Api.Object.AccountsConnection -> Field (Maybe decodesTo) RootQuery
allAccounts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, offset = Absent, before = Absent, after = Absent, orderBy = Absent, condition = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "before" filledInOptionals.before (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "after" filledInOptionals.after (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Beatmon.Api.Enum.AccountsOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals.condition Beatmon.Api.InputObject.encodeAccountCondition ]
                |> List.filterMap identity
    in
    Object.selectionField "allAccounts" optionalArgs object_ (identity >> Decode.nullable)


type alias AllHeartbeatsOptionalArguments =
    { first : OptionalArgument Int, last : OptionalArgument Int, offset : OptionalArgument Int, before : OptionalArgument Beatmon.Api.Scalar.Cursor, after : OptionalArgument Beatmon.Api.Scalar.Cursor, orderBy : OptionalArgument (List Beatmon.Api.Enum.HeartbeatsOrderBy.HeartbeatsOrderBy), condition : OptionalArgument Beatmon.Api.InputObject.HeartbeatCondition }


{-| Reads and enables pagination through a set of `Heartbeat`.

  - first - Only read the first `n` values of the set.
  - last - Only read the last `n` values of the set.
  - offset - Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
  - before - Read all values in the set before (above) this cursor.
  - after - Read all values in the set after (below) this cursor.
  - orderBy - The method to use when ordering `Heartbeat`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
allHeartbeats : (AllHeartbeatsOptionalArguments -> AllHeartbeatsOptionalArguments) -> SelectionSet decodesTo Beatmon.Api.Object.HeartbeatsConnection -> Field (Maybe decodesTo) RootQuery
allHeartbeats fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, offset = Absent, before = Absent, after = Absent, orderBy = Absent, condition = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "before" filledInOptionals.before (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "after" filledInOptionals.after (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Beatmon.Api.Enum.HeartbeatsOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals.condition Beatmon.Api.InputObject.encodeHeartbeatCondition ]
                |> List.filterMap identity
    in
    Object.selectionField "allHeartbeats" optionalArgs object_ (identity >> Decode.nullable)


type alias AllHeartbeatLogsOptionalArguments =
    { first : OptionalArgument Int, last : OptionalArgument Int, offset : OptionalArgument Int, before : OptionalArgument Beatmon.Api.Scalar.Cursor, after : OptionalArgument Beatmon.Api.Scalar.Cursor, orderBy : OptionalArgument (List Beatmon.Api.Enum.HeartbeatLogsOrderBy.HeartbeatLogsOrderBy), condition : OptionalArgument Beatmon.Api.InputObject.HeartbeatLogCondition }


{-| Reads and enables pagination through a set of `HeartbeatLog`.

  - first - Only read the first `n` values of the set.
  - last - Only read the last `n` values of the set.
  - offset - Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
  - before - Read all values in the set before (above) this cursor.
  - after - Read all values in the set after (below) this cursor.
  - orderBy - The method to use when ordering `HeartbeatLog`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
allHeartbeatLogs : (AllHeartbeatLogsOptionalArguments -> AllHeartbeatLogsOptionalArguments) -> SelectionSet decodesTo Beatmon.Api.Object.HeartbeatLogsConnection -> Field (Maybe decodesTo) RootQuery
allHeartbeatLogs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, offset = Absent, before = Absent, after = Absent, orderBy = Absent, condition = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "before" filledInOptionals.before (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "after" filledInOptionals.after (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Beatmon.Api.Enum.HeartbeatLogsOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals.condition Beatmon.Api.InputObject.encodeHeartbeatLogCondition ]
                |> List.filterMap identity
    in
    Object.selectionField "allHeartbeatLogs" optionalArgs object_ (identity >> Decode.nullable)


type alias AccountByAccountIdRequiredArguments =
    { accountId : Beatmon.Api.Scalar.BigInt }


accountByAccountId : AccountByAccountIdRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.Account -> Field (Maybe decodesTo) RootQuery
accountByAccountId requiredArgs object_ =
    Object.selectionField "accountByAccountId" [ Argument.required "accountId" requiredArgs.accountId (\(Beatmon.Api.Scalar.BigInt raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


type alias AccountByEmailRequiredArguments =
    { email : String }


accountByEmail : AccountByEmailRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.Account -> Field (Maybe decodesTo) RootQuery
accountByEmail requiredArgs object_ =
    Object.selectionField "accountByEmail" [ Argument.required "email" requiredArgs.email Encode.string ] object_ (identity >> Decode.nullable)


type alias HeartbeatByHeartbeatIdRequiredArguments =
    { heartbeatId : Beatmon.Api.Scalar.Uuid }


heartbeatByHeartbeatId : HeartbeatByHeartbeatIdRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.Heartbeat -> Field (Maybe decodesTo) RootQuery
heartbeatByHeartbeatId requiredArgs object_ =
    Object.selectionField "heartbeatByHeartbeatId" [ Argument.required "heartbeatId" requiredArgs.heartbeatId (\(Beatmon.Api.Scalar.Uuid raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


type alias HeartbeatByHeartbeatIdAndAccountIdRequiredArguments =
    { heartbeatId : Beatmon.Api.Scalar.Uuid, accountId : Beatmon.Api.Scalar.BigInt }


heartbeatByHeartbeatIdAndAccountId : HeartbeatByHeartbeatIdAndAccountIdRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.Heartbeat -> Field (Maybe decodesTo) RootQuery
heartbeatByHeartbeatIdAndAccountId requiredArgs object_ =
    Object.selectionField "heartbeatByHeartbeatIdAndAccountId" [ Argument.required "heartbeatId" requiredArgs.heartbeatId (\(Beatmon.Api.Scalar.Uuid raw) -> Encode.string raw), Argument.required "accountId" requiredArgs.accountId (\(Beatmon.Api.Scalar.BigInt raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


type alias HeartbeatLogByDateAndHeartbeatIdRequiredArguments =
    { date : Beatmon.Api.Scalar.Datetime, heartbeatId : Beatmon.Api.Scalar.Uuid }


heartbeatLogByDateAndHeartbeatId : HeartbeatLogByDateAndHeartbeatIdRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.HeartbeatLog -> Field (Maybe decodesTo) RootQuery
heartbeatLogByDateAndHeartbeatId requiredArgs object_ =
    Object.selectionField "heartbeatLogByDateAndHeartbeatId" [ Argument.required "date" requiredArgs.date (\(Beatmon.Api.Scalar.Datetime raw) -> Encode.string raw), Argument.required "heartbeatId" requiredArgs.heartbeatId (\(Beatmon.Api.Scalar.Uuid raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


currentAccount : SelectionSet decodesTo Beatmon.Api.Object.Account -> Field (Maybe decodesTo) RootQuery
currentAccount object_ =
    Object.selectionField "currentAccount" [] object_ (identity >> Decode.nullable)


currentAccountId : Field (Maybe Beatmon.Api.Scalar.BigInt) RootQuery
currentAccountId =
    Object.fieldDecoder "currentAccountId" [] (Object.scalarDecoder |> Decode.map Beatmon.Api.Scalar.BigInt |> Decode.nullable)


type alias AccountRequiredArguments =
    { nodeId : Beatmon.Api.Scalar.Id }


{-| Reads a single `Account` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `Account`.

-}
account : AccountRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.Account -> Field (Maybe decodesTo) RootQuery
account requiredArgs object_ =
    Object.selectionField "account" [ Argument.required "nodeId" requiredArgs.nodeId (\(Beatmon.Api.Scalar.Id raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


type alias HeartbeatRequiredArguments =
    { nodeId : Beatmon.Api.Scalar.Id }


{-| Reads a single `Heartbeat` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `Heartbeat`.

-}
heartbeat : HeartbeatRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.Heartbeat -> Field (Maybe decodesTo) RootQuery
heartbeat requiredArgs object_ =
    Object.selectionField "heartbeat" [ Argument.required "nodeId" requiredArgs.nodeId (\(Beatmon.Api.Scalar.Id raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)


type alias HeartbeatLogRequiredArguments =
    { nodeId : Beatmon.Api.Scalar.Id }


{-| Reads a single `HeartbeatLog` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `HeartbeatLog`.

-}
heartbeatLog : HeartbeatLogRequiredArguments -> SelectionSet decodesTo Beatmon.Api.Object.HeartbeatLog -> Field (Maybe decodesTo) RootQuery
heartbeatLog requiredArgs object_ =
    Object.selectionField "heartbeatLog" [ Argument.required "nodeId" requiredArgs.nodeId (\(Beatmon.Api.Scalar.Id raw) -> Encode.string raw) ] object_ (identity >> Decode.nullable)
