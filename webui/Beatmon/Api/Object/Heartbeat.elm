-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Beatmon.Api.Object.Heartbeat exposing (HeartbeatLogsByHeartbeatIdAndAccountIdOptionalArguments, accountByAccountId, accountId, heartbeatId, heartbeatLogsByHeartbeatIdAndAccountId, lastSeen, name, nodeId, notifyAfterSeconds, selection)

import Beatmon.Api.Enum.HeartbeatLogsOrderBy
import Beatmon.Api.InputObject
import Beatmon.Api.Interface
import Beatmon.Api.Object
import Beatmon.Api.Scalar
import Beatmon.Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Beatmon.Api.Object.Heartbeat
selection constructor =
    Object.selection constructor


{-| A globally unique identifier. Can be used in various places throughout the system to identify this single value.
-}
nodeId : Field Beatmon.Api.Scalar.Id Beatmon.Api.Object.Heartbeat
nodeId =
    Object.fieldDecoder "nodeId" [] (Object.scalarDecoder |> Decode.map Beatmon.Api.Scalar.Id)


heartbeatId : Field Beatmon.Api.Scalar.Uuid Beatmon.Api.Object.Heartbeat
heartbeatId =
    Object.fieldDecoder "heartbeatId" [] (Object.scalarDecoder |> Decode.map Beatmon.Api.Scalar.Uuid)


accountId : Field Beatmon.Api.Scalar.BigInt Beatmon.Api.Object.Heartbeat
accountId =
    Object.fieldDecoder "accountId" [] (Object.scalarDecoder |> Decode.map Beatmon.Api.Scalar.BigInt)


name : Field (Maybe String) Beatmon.Api.Object.Heartbeat
name =
    Object.fieldDecoder "name" [] (Decode.string |> Decode.nullable)


notifyAfterSeconds : Field Int Beatmon.Api.Object.Heartbeat
notifyAfterSeconds =
    Object.fieldDecoder "notifyAfterSeconds" [] Decode.int


{-| Reads a single `Account` that is related to this `Heartbeat`.
-}
accountByAccountId : SelectionSet decodesTo Beatmon.Api.Object.Account -> Field (Maybe decodesTo) Beatmon.Api.Object.Heartbeat
accountByAccountId object_ =
    Object.selectionField "accountByAccountId" [] object_ (identity >> Decode.nullable)


type alias HeartbeatLogsByHeartbeatIdAndAccountIdOptionalArguments =
    { first : OptionalArgument Int, last : OptionalArgument Int, offset : OptionalArgument Int, before : OptionalArgument Beatmon.Api.Scalar.Cursor, after : OptionalArgument Beatmon.Api.Scalar.Cursor, orderBy : OptionalArgument (List Beatmon.Api.Enum.HeartbeatLogsOrderBy.HeartbeatLogsOrderBy), condition : OptionalArgument Beatmon.Api.InputObject.HeartbeatLogCondition }


{-| Reads and enables pagination through a set of `HeartbeatLog`.

  - first - Only read the first `n` values of the set.
  - last - Only read the last `n` values of the set.
  - offset - Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
  - before - Read all values in the set before (above) this cursor.
  - after - Read all values in the set after (below) this cursor.
  - orderBy - The method to use when ordering `HeartbeatLog`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
heartbeatLogsByHeartbeatIdAndAccountId : (HeartbeatLogsByHeartbeatIdAndAccountIdOptionalArguments -> HeartbeatLogsByHeartbeatIdAndAccountIdOptionalArguments) -> SelectionSet decodesTo Beatmon.Api.Object.HeartbeatLogsConnection -> Field decodesTo Beatmon.Api.Object.Heartbeat
heartbeatLogsByHeartbeatIdAndAccountId fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { first = Absent, last = Absent, offset = Absent, before = Absent, after = Absent, orderBy = Absent, condition = Absent }

        optionalArgs =
            [ Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "before" filledInOptionals.before (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "after" filledInOptionals.after (\(Beatmon.Api.Scalar.Cursor raw) -> Encode.string raw), Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Beatmon.Api.Enum.HeartbeatLogsOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals.condition Beatmon.Api.InputObject.encodeHeartbeatLogCondition ]
                |> List.filterMap identity
    in
    Object.selectionField "heartbeatLogsByHeartbeatIdAndAccountId" optionalArgs object_ identity


lastSeen : Field (Maybe Beatmon.Api.Scalar.Datetime) Beatmon.Api.Object.Heartbeat
lastSeen =
    Object.fieldDecoder "lastSeen" [] (Object.scalarDecoder |> Decode.map Beatmon.Api.Scalar.Datetime |> Decode.nullable)
